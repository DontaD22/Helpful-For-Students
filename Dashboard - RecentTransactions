import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { format } from "date-fns";
import { TrendingUp, TrendingDown } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";

export default function RecentTransactions({ expenses, income, loading }) {
  const allTransactions = [
    ...expenses.map(e => ({ ...e, type: 'expense' })),
    ...income.map(i => ({ ...i, type: 'income' }))
  ].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 8);

  const categoryColors = {
    tuition: "bg-blue-100 text-blue-800",
    textbooks: "bg-purple-100 text-purple-800",
    housing: "bg-green-100 text-green-800",
    food: "bg-orange-100 text-orange-800",
    transportation: "bg-yellow-100 text-yellow-800",
    entertainment: "bg-pink-100 text-pink-800",
    health: "bg-red-100 text-red-800",
    job: "bg-emerald-100 text-emerald-800",
    financial_aid: "bg-blue-100 text-blue-800",
    scholarship: "bg-purple-100 text-purple-800",
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Recent Transactions</CardTitle>
        </CardHeader>
        <CardContent>
          {Array(5).fill(0).map((_, i) => (
            <div key={i} className="flex justify-between items-center py-3 border-b last:border-0">
              <Skeleton className="h-4 w-32" />
              <Skeleton className="h-4 w-20" />
            </div>
          ))}
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Transactions</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {allTransactions.map((transaction, index) => (
            <div key={index} className="flex justify-between items-center p-3 rounded-lg hover:bg-gray-50 transition-colors">
              <div className="flex items-center gap-3">
                <div className={`p-2 rounded-lg ${transaction.type === 'income' ? 'bg-green-100' : 'bg-red-100'}`}>
                  {transaction.type === 'income' ? (
                    <TrendingUp className="w-4 h-4 text-green-600" />
                  ) : (
                    <TrendingDown className="w-4 h-4 text-red-600" />
                  )}
                </div>
                <div>
                  <p className="font-medium">
                    {transaction.type === 'income' ? transaction.source : transaction.title}
                  </p>
                  <div className="flex items-center gap-2 mt-1">
                    <p className="text-sm text-gray-500">
                      {format(new Date(transaction.date), "MMM d, yyyy")}
                    </p>
                    <Badge variant="secondary" className={`text-xs ${categoryColors[transaction.category || transaction.type]}`}>
                      {(transaction.category || transaction.type).replace(/_/g, ' ')}
                    </Badge>
                  </div>
                </div>
              </div>
              <p className={`font-semibold ${transaction.type === 'income' ? 'text-green-600' : 'text-red-600'}`}>
                {transaction.type === 'income' ? '+' : '-'}${transaction.amount?.toFixed(2)}
              </p>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
